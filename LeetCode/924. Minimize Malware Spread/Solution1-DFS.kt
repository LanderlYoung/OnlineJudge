package problem924_1

import shouldBeEqualTo

class Solution {
  fun minMalwareSpread(graph: Array<IntArray>, initial: IntArray): Int {
    val visited = BooleanArray(graph.size)
    val initialSet = initial.toSet()

    var count = 0
    var initialCount = 0
    var isValid = true

    fun dfs(n: Int) {
      if (visited[n]) return

      if (initialSet.contains(n)) initialCount++
      if (initialCount > 1) {
        isValid = false
      }

      count++
      visited[n] = true

      for (j in 0..<graph.size) {
        if (graph[n][j] == 1) {
          dfs(j)
        }
      }
    }

    var maxCount = 0
    var maxCountInitial = Int.MAX_VALUE
    initial.forEach { init ->
      count = 0
      initialCount = 0
      isValid = true

      // note: we only cover the whole graph ONCE
      // If an initial node is visited in previous dfs, it means the node can be reached by other initial node, which
      // also indicates the "island" contains at least 2 initial nodes.
      // So dfs returns immediately, left count == 0.
      dfs(init)
      if (!isValid) count = 0

      if (count > maxCount || (count == maxCount && init < maxCountInitial)) {
        maxCount = count
        maxCountInitial = init
      }
    }

    return maxCountInitial
  }
}

fun main() {
  fun test(
    graph: Array<IntArray>, initial: IntArray,
    expected: Int,
  ) {
    val result = Solution().minMalwareSpread(graph, initial)
    println("$ -> ${result} == ${expected} -> ${result == expected}")
    result shouldBeEqualTo expected
  }

  test(
    arrayOf(
      intArrayOf(1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1),
      intArrayOf(0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0),
      intArrayOf(0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0),
      intArrayOf(0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0),
      intArrayOf(1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0),
      intArrayOf(0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0),
      intArrayOf(0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0),
      intArrayOf(0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0),
      intArrayOf(0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0),
      intArrayOf(0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0),
      intArrayOf(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)
    ),
    intArrayOf(7, 8, 2, 3),
    2
  )

  test(
    arrayOf(
      intArrayOf(1, 1, 0),
      intArrayOf(1, 1, 0),
      intArrayOf(0, 0, 1)
    ),
    intArrayOf(0, 1, 2),
    2
  )

  test(
    arrayOf(
      intArrayOf(1, 1, 0),
      intArrayOf(1, 1, 0),
      intArrayOf(0, 0, 1)
    ),
    intArrayOf(0, 1),
    0
  )

  test(
    arrayOf(
      intArrayOf(1, 0, 0),
      intArrayOf(0, 1, 0),
      intArrayOf(0, 0, 1)
    ),
    intArrayOf(0, 2),
    0
  )

  test(
    arrayOf(
      intArrayOf(1, 1, 1),
      intArrayOf(1, 1, 1),
      intArrayOf(1, 1, 1)
    ),
    intArrayOf(1, 2),
    1
  )
}