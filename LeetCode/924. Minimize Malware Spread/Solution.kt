package problem924

import shouldBeEqualTo

// brutel
class Solution {
  fun minMalwareSpread(graph: Array<IntArray>, initial: IntArray): Int {
    fun m(delete: Int): Int {
      val visited = BooleanArray(graph.size)

      fun dfs(n: Int) {
        if (visited[n]) return
        visited[n] = true
        for (j in 0..<graph.size) {
          if (graph[n][j] == 1) {
            dfs(j)
          }
        }
      }

      initial.forEach {
        if (it != delete) dfs(it)
      }
      return visited.count { it }
    }

    return initial.sorted().minBy { m(it) }
  }
}

fun main() {
  fun test(
    graph: Array<IntArray>, initial: IntArray,
    expected: Int,
  ) {
    val result = Solution().minMalwareSpread(graph, initial)
    println("$ -> ${result} == ${expected} -> ${result == expected}")
    result shouldBeEqualTo expected
  }

  test(
    arrayOf(
      intArrayOf(1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1),
      intArrayOf(0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0),
      intArrayOf(0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0),
      intArrayOf(0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0),
      intArrayOf(1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0),
      intArrayOf(0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0),
      intArrayOf(0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0),
      intArrayOf(0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0),
      intArrayOf(0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0),
      intArrayOf(0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0),
      intArrayOf(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)
    ),
    intArrayOf(7, 8, 2, 3),
    2
  )

  test(
    arrayOf(
      intArrayOf(1, 1, 0),
      intArrayOf(1, 1, 0),
      intArrayOf(0, 0, 1)
    ),
    intArrayOf(0, 1, 2),
    2
  )

  test(
    arrayOf(
      intArrayOf(1, 1, 0),
      intArrayOf(1, 1, 0),
      intArrayOf(0, 0, 1)
    ),
    intArrayOf(0, 1),
    0
  )

  test(
    arrayOf(
      intArrayOf(1, 0, 0),
      intArrayOf(0, 1, 0),
      intArrayOf(0, 0, 1)
    ),
    intArrayOf(0, 2),
    0
  )

  test(
    arrayOf(
      intArrayOf(1, 1, 1),
      intArrayOf(1, 1, 1),
      intArrayOf(1, 1, 1)
    ),
    intArrayOf(1, 2),
    1
  )
}